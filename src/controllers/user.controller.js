import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.model.js"
import { uploadOnCloundinary } from "../utils/cloudinary.js"
import { ApiResponse } from "../utils/ApiResponse.js";

const registerUser = asyncHandler(async (req, res) => {
    // enter username, email, password, fullname
    // data validation(email correct format me hai ya nahi, password ka format sahi hai ya nahi, everything is not empty)
    // check if user already exists: username, email
    // check for images, check for avatar
    // upload image to cloudinary, check for avatar
    // create user object - create entry in db
    // remove password and refreshToken field from response
    // check for user creation
    // return response

    const { fullName, email, userName, password } = req.body // destructuring the data coming from the front end
    console.log("email : ", email);

    // this way also it can be done
    /*if (fullName === ""){
        throw new ApiError(400, "fullname is required")
    }

    if (email === ""){
        throw new ApiError(400, "email is required")
    }

    if (userName === ""){
        throw new ApiError(400, "Username is required")
    }

    if (password === ""){
        throw new ApiError(400, "Password is required")
    }*/

    if (
        [fullName, email, userName, password].some((field) => {field?.trim === ""})
    ){
        throw new ApiError(400, "All foelds are required")
    }
    // User we have imported from user.model.js which can interact with my database to send queries
    // here we want to see if a user with same username or email exists
    const existedUser = User.findOne({
        $or : [{ username }, { email }]
    })
    // if it exists we throw a 409 error with the error message
    if (existedUser){
        throw new ApiError(409, "User with email ot username already exists")
    }
    // using multer we can access the files using req.files
    // ? here is used for optional chaining 
    const avatarLocalPath = req.files?.avatar[0]?.path;
    const coverImageLocalPath = req.files?.coverImage[0]?.path;

    if (avatarLocalPath){
        throw new ApiError(400, "Avatar file is required")
    }
    // using uploadOncloudinary imported from cloudinary to upload the avata, cover image to cloudinary
    // await is used because uploading on database will take time
    const avatar = await uploadOnCloundinary(avatarLocalPath);
    const coverImage = await uploadOnCloundinary(coverImageLocalPath)
    // as avatar is required if it is not present 400 error is thrown
    if (!avatar){
        throw new ApiError(400, "Avatar file is required");
    }
    // creating user object for the database
    const user = await User.create({
        fullName,
        avatar: avatar.url,
        coverImage: coverImage.url || "", // if cover image is present store its url or just an empty field
        email,
        password,
        username : username.toLowerCase()
    })

    // if user is created find it by id(this id is automatially generated by monogdb)
    const createdUser = await User.findById(user._id).select(
        // we write here what we don't require
        "-password -refreshToken"
    )
    // throwing an error if user is not created in the database
    if (!createdUser){
        throw new ApiError(500, "Soomething went wrong while registering the user")
    }

    return res.status(201).json(
        new ApiResponse(200, createdUser, "User registered successfully")
    )

});

export { registerUser };